ansys.scade.apitools.create.data_def.add_data_def_assertion
===========================================================

.. py:function:: ansys.scade.apitools.create.data_def.add_data_def_assertion(data_def: scade.model.suite.DataDef, diagram: scade.model.suite.Diagram, name: str, expr: ansys.scade.apitools.create.expression.EX, kind: AK = AK.ASSUME, position: Tuple[float, float] = None) -> scade.model.suite.Assertion

   
   Create an assertion in a scope.


   :Parameters:

       **data_def** : :obj:`suite.DataDef`
           Input scope, which is an operator, state, or action.

       **diagram** : :obj:`suite.Diagram`
           Diagram containing the equation. The diagram specified can be either graphical
           or textual, or it can be ``None``. However, it cannot be ``None`` if the scope
           contains at least one diagram.

       **name** : :class:`python:str`
           Name of the assertion.

       **expr** : :obj:`EX`
           Expression of the assertion.

       **kind** : :obj:`AK`, default: :obj:`ASSUME`
           Kind of the assertion.

       **position** : :obj:`Tuple`\[:class:`python:float`, :class:`python:float`], default: :data:`python:None`
           Position of the assertion, expressed in 1/100th of mm.
           This value is ignored if the diagram is not a graphical diagram.
           Otherwise, it must be specified.



   :Returns:

       :obj:`suite.Assertion`
           ..











   ..
       !! processed by numpydoc !!
