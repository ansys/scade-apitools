




The ``data_def.py`` module
==========================

.. py:module:: ansys.scade.apitools.create.data_def


Summary
-------
























.. py:currentmodule:: data_def
.. tab-set::




    .. tab-item:: Classes

        .. list-table::
          :header-rows: 0
          :widths: auto


          * - :py:attr:`~IfTree`
            - Provides an intermediate structure for describing the structure of an if block.


          * - :py:attr:`~TransitionDestination`
            - Provides the top-level abstract class for transition destinations.


          * - :py:attr:`~TransitionTree`
            - Provides the intermediate class for transitions.


          * - :py:attr:`~WhenBranch`
            - Provides the intermediate class for when branches.



    .. tab-item:: Enums

        .. list-table::
          :header-rows: 0
          :widths: auto


          * - :py:attr:`~AK`
            - Provides an enum of assertion kinds.


          * - :py:attr:`~DK`
            - Provides an enum of display kinds.


          * - :py:attr:`~SK`
            - Provides an enum of state kinds.


          * - :py:attr:`~TK`
            - Provides an enum of transition kinds.




    .. tab-item:: Functions

        .. list-table::
          :header-rows: 0
          :widths: auto


          * - :py:attr:`~add_data_def_assertion`
            - Create an assertion in a scope.


          * - :py:attr:`~add_data_def_equation`
            - Create an equation in a scope.


          * - :py:attr:`~add_data_def_if_block`
            - Create an if block in a scope.


          * - :py:attr:`~add_data_def_locals`
            - Add local variables to a scope.


          * - :py:attr:`~add_data_def_net_diagram`
            - Add a graphical diagram to a scope.


          * - :py:attr:`~add_data_def_probes`
            - Add probes to a scope.


          * - :py:attr:`~add_data_def_signals`
            - Add signals to a scope.


          * - :py:attr:`~add_data_def_state_machine`
            - Create a state machine in a scope.


          * - :py:attr:`~add_data_def_text_diagram`
            - Add a textal diagram to a scope.


          * - :py:attr:`~add_data_def_when_block`
            - Add a new when block in a scope.


          * - :py:attr:`~add_diagram_edge`
            - Add a graphical edge between two equations in a graphical diagram.


          * - :py:attr:`~add_diagram_equation_set`
            - Add a new equation set to a graphical diagram.


          * - :py:attr:`~add_diagram_missing_edges`
            - Add the missing edges in a graphical diagram with default positions.


          * - :py:attr:`~add_state_machine_state`
            - Create a state in a state machine.


          * - :py:attr:`~add_state_transition`
            - Add a new transition starting from a state.


          * - :py:attr:`~add_transition_equation`
            - Create an equation in a transition.


          * - :py:attr:`~add_when_block_branches`
            - Add new branches to a when block.


          * - :py:attr:`~create_if_action`
            - Create a leaf action in the intermediate structure if it is a tree structure.


          * - :py:attr:`~create_if_tree`
            - Create a decision in the intermediate structure if it is a tree structure.


          * - :py:attr:`~create_transition_fork`
            - Create an intermediate transition structure with forked transitions.


          * - :py:attr:`~create_transition_state`
            - Create an intermediate transition structure that targets a state.


          * - :py:attr:`~create_when_branch`
            - Create an intermediate structure for a when branch.


          * - :py:attr:`~set_variable_default`
            - Set the default value of a variable.


          * - :py:attr:`~set_variable_last`
            - Set the last value of a variable.




    .. tab-item:: Constants

        .. list-table::
          :header-rows: 0
          :widths: auto


          * - :py:attr:`~IT`
            - Short name for an ``IfTree`` instance to simplify the declarations.


          * - :py:attr:`~TD`
            - Short name for a ``TransitionDestination`` instance to simplify the declarations.


          * - :py:attr:`~TR`
            - Short name for a ``TransitionTree`` instance to simplify the declarations.







.. toctree::
   :titlesonly:
   :maxdepth: 1
   :hidden:

    🝆 IfTree<IfTree>
    🝆 TransitionDestination<TransitionDestination>
    🝆 TransitionTree<TransitionTree>
    🝆 WhenBranch<WhenBranch>


.. toctree::
   :titlesonly:
   :maxdepth: 1
   :hidden:

    ≔ AK<AK>
    ≔ DK<DK>
    ≔ SK<SK>
    ≔ TK<TK>



.. toctree::
   :titlesonly:
   :maxdepth: 1
   :hidden:

    𝑓(x) add_data_def_assertion<add_data_def_assertion>
    𝑓(x) add_data_def_equation<add_data_def_equation>
    𝑓(x) add_data_def_if_block<add_data_def_if_block>
    𝑓(x) add_data_def_locals<add_data_def_locals>
    𝑓(x) add_data_def_net_diagram<add_data_def_net_diagram>
    𝑓(x) add_data_def_probes<add_data_def_probes>
    𝑓(x) add_data_def_signals<add_data_def_signals>
    𝑓(x) add_data_def_state_machine<add_data_def_state_machine>
    𝑓(x) add_data_def_text_diagram<add_data_def_text_diagram>
    𝑓(x) add_data_def_when_block<add_data_def_when_block>
    𝑓(x) add_diagram_edge<add_diagram_edge>
    𝑓(x) add_diagram_equation_set<add_diagram_equation_set>
    𝑓(x) add_diagram_missing_edges<add_diagram_missing_edges>
    𝑓(x) add_state_machine_state<add_state_machine_state>
    𝑓(x) add_state_transition<add_state_transition>
    𝑓(x) add_transition_equation<add_transition_equation>
    𝑓(x) add_when_block_branches<add_when_block_branches>
    𝑓(x) create_if_action<create_if_action>
    𝑓(x) create_if_tree<create_if_tree>
    𝑓(x) create_transition_fork<create_transition_fork>
    𝑓(x) create_transition_state<create_transition_state>
    𝑓(x) create_when_branch<create_when_branch>
    𝑓(x) set_variable_default<set_variable_default>
    𝑓(x) set_variable_last<set_variable_last>






Description
-----------

Provides create functions for Scade operator definitions.

* Interface
* Behavior

..
    !! processed by numpydoc !!






Module detail
-------------

.. py:data:: IT

   
   Short name for an ``IfTree`` instance to simplify the declarations.
















   ..
       !! processed by numpydoc !!

.. py:data:: TD

   
   Short name for a ``TransitionDestination`` instance to simplify the declarations.
















   ..
       !! processed by numpydoc !!

.. py:data:: TR

   
   Short name for a ``TransitionTree`` instance to simplify the declarations.
















   ..
       !! processed by numpydoc !!



