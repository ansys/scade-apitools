





:class:`CaseOp`
===============

.. py:class:: ansys.scade.apitools.expr.access.CaseOp(expression: scade.model.suite.ExprCall)

   Bases: :py:obj:`CallExpression`


   Provides the case expression.

   Here is the format:

   .. code::

      ( case <switch> of ``
        | <pattern> :   <flow>
        | ...
        | <pattern> :   <flow>
        | _ :   <default>)

   See the :ref:`case_op <ex__case_op>` example.

   Notes
   -----
   The design differs slightly from the meta-model. The ``Case`` case used to
   implement the ``case`` collection is replaced by a tuple (``pattern``, ``flow``).

   A new property, ``default``, provides the optional default value.

   Parameters
   ----------
   expression :
       Call expression to wrap.

   Initialize the instance from the Scade expression.



.. py:currentmodule:: CaseOp

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~cases`
            - Pairs (:class:`~Expression`, :class:`~Expression`) to build the case.
          * - :py:attr:`~default`
            - Value to use as default when not ``None``.
          * - :py:attr:`~switch`
            - Selector of the case expression.







Import detail
-------------

.. code-block:: python

    from ansys.scade.apitools.expr.access import CaseOp

Property detail
---------------

.. py:property:: cases
   :type: list[tuple[Expression, Expression]]


   Pairs (:class:`~Expression`, :class:`~Expression`) to build the case.


.. py:property:: default
   :type: Optional[Expression]


   Value to use as default when not ``None``.


.. py:property:: switch
   :type: Expression


   Selector of the case expression.







