-- python -m pygments -x -l swan.py:SwanLexer test.swan
-- python -m pygments -x -l swan.py:SwanLexer test.swan -f html -Ofull,debug_token_types  > test.html

node Root<<M,N>>(i: 'T^M^N; a: int32 last = 42; clock c: bool) 
        returns (o: 'T ^N^M) where 'T integer {
var
   #pragma kcg C:name foobar #end            x: float<<32>>;
   #pragma kcg doc ##include "foobar.h" #end y: int64;
   #pragma this is not the ##end #end        y: int64;
   probe prb: bool;
let
   x = 1.12E5 + 1.E+3 + 1.0e-12 + 1._f32 + .1;
   y = 0 + 12 - 0b010101 mod 0o777 + (0xFFF lsl 3) + (42_i8 :> int32);
   o = 1 + last 'a;
   a = (case x of
      | 12: prb or prb
      | _ : if prb then a > 12 else a < 15);
   o = transpose<<1, 2>>(i);
}

/* comment line 1
   comment line 2
 */
const K : int = 12; -- end of line comment
type
   E = enum { A, #pragma kcg C:enum_val 42 #end B};
   S = {
      f1: bool;
   };
/* /* nested comment 1 */
   some groups
*/
group G = {l1: int32; l2: int64};


-- true if the current array content is sorted (increasing or decreasing)
function sorted(A: int32^5) returns (o:bool)
   o = forward <<5>> with [a]=A;
         let m :
           automaton
             initial state S0:
             unless if (true) resume Constant;

             state Constant:
             unless
               if (a > last 'a) resume S0;
           ;
       returns (m : default = true);


function cartesian2polar(p: coord2D) returns (np: coord2D default = p)
   np: activate when p match
     | Cartesian {z}:
         np = Polar {r : sqrt(pow_2(z.x) + pow_2(z.y)), t : arctan(z.y / z.x)};
     | Polar _      :
        np = p;
     ;

node integrator (i: float64 ) returns (o: float64 ) {
   diagram
      (#adder-1 block (function a, b => a + b))
      (#delay_1 expr pre #2-0
        where (#2-0 group))
      (#init_1 expr 0.0 -> #3-1
        where (#3-1 group))
      (#4 expr i)
      (#123-456 def o)
      (wire #delay_1 => #3-1)
      (wire #adder-1 => #2-0, #123-456)
      (wire #4 => #adder-1 .(1))
      (wire #3 => #adder-1 .(2))
   }


/* test reserved keywords */
private node(parameter b: int is public) {
   abstract sig b;
   do  {synchro 42 times true onreset = false};
} 

